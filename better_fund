//SPDX-License-Identifier: UNLICENSED
pragma solidity >=0.5.0<0.9.0;

contract CrowdFunding{
    mapping(address=>uint) public contributors; //for defining contributors here we used mapping means how much contributor pay
    //addresses through we understood how much contributors can donate
    address public manager;// here we define manager as well his address 
    uint public minimumContribution;
    uint public deadline;
    uint public target;
    uint public raisedAmount;// for comparating with targerrt
    uint public noOfContributors;//for taking percentage of how much money people can donate.

     struct Request{ //here manager make request for his purpose
        string description;// give purpose description
        address payable recipient; //for which purpose.
        uint value;
        bool completed;
        uint noOfVoters;// then we check how many contributors did request for this project
        mapping(address=>bool) voters;// at end we do maaping.
    }
    mapping(uint=>Request) public requests;
    uint public numRequests;
    constructor(uint _target,uint _deadline){
        target=_target;
        deadline=block.timestamp+_deadline; //10sec + 3600sec (60*60)
        minimumContribution=100 wei;
        manager=msg.sender;// we put msg.sender inside the manager.from msg.sender manger will get value.
    }
    
    function sendEth() public payable{ //for sending ether here we make function sendeth.
        require(block.timestamp < deadline,"Deadline has passed");
        require(msg.value >=minimumContribution,"Minimum Contribution is not met");
        
        if(contributors[msg.sender]==0){// initially there is 0 money after paying then we increase no of contributors.
            noOfContributors++;
        }
        contributors[msg.sender]+=msg.value;
        raisedAmount+=msg.value;
    }
    function getContractBalance() public view returns(uint){ //here we check contract balance
        return address(this).balance;
    }
    function refund() public{ //here we creat rfund function
        require(block.timestamp>deadline && raisedAmount<target,"You are not eligible for refund");// if deadline cross and target dont achieve
        require(contributors[msg.sender]>0);//contributors have to donate something.means greater than 0.
        address payable user=payable(msg.sender);
        user.transfer(contributors[msg.sender]);//for transfering contributors money to himself we have to make explicitly payable.
        contributors[msg.sender]=0; //after refunding his all moneey in his account 0 money.
        
    }
    modifier onlyManger(){
        require(msg.sender==manager,"Only manager can calll this function");
        _;
    }
    function createRequests(string memory _description,address payable _recipient,uint _value) public onlyManger{
        Request storage newRequest = requests[numRequests];//here manager create new request using struct for storing new request we usestorage
        numRequests++;
        newRequest.description=_description;
        newRequest.recipient=_recipient;
        newRequest.value=_value;
        newRequest.completed=false;
        newRequest.noOfVoters=0;
    }
    function voteRequest(uint _requestNo) public{

        require(contributors[msg.sender]>0,"YOu must be contributor");

        Request storage thisRequest=requests[_requestNo];

        require(thisRequest.voters[msg.sender]==false,"You have already voted");

        thisRequest.voters[msg.sender]=true;

        thisRequest.noOfVoters++;

    }

    function makePayment(uint _requestNo) public onlyManger{

        require(raisedAmount>=target);

        Request storage thisRequest=requests[_requestNo];

        require(thisRequest.completed==false,"The request has been completed");

        require(thisRequest.noOfVoters > noOfContributors/2,"Majority does not support");

        thisRequest.recipient.transfer(thisRequest.value);

        thisRequest.completed=true;

    }

}
